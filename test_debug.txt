============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0 -- /Users/shepner/src/qa_system/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/shepner/src/qa_system
configfile: pytest.ini
plugins: anyio-4.9.0, mock-3.14.0
collecting ... collected 94 items

tests/test_base_processor.py::test_extract_metadata PASSED               [  1%]
tests/test_base_processor.py::test_chunk_text_sentence_aware PASSED      [  2%]
tests/test_base_processor.py::test_chunk_text_overlap PASSED             [  3%]
tests/test_base_processor.py::test_process_not_implemented PASSED        [  4%]
tests/test_base_processor.py::test_logging_integration PASSED            [  5%]
tests/test_base_processor.py::test_base_metadata_and_chunk_fields PASSED [  6%]
tests/test_config.py::test_get_config_and_nested_access PASSED           [  7%]
tests/test_config.py::test_config_file_not_found PASSED                  [  8%]
tests/test_config.py::test_invalid_yaml PASSED                           [  9%]
tests/test_document_processors_init.py::test_get_processor_for_file_type_txt PASSED [ 10%]
tests/test_document_processors_init.py::test_get_processor_for_file_type_md PASSED [ 11%]
tests/test_document_processors_init.py::test_get_processor_for_file_type_pdf PASSED [ 12%]
tests/test_document_processors_init.py::test_get_processor_for_file_type_unknown PASSED [ 13%]
tests/test_document_processors_init.py::test_get_processor_for_file_type_no_extension PASSED [ 14%]
tests/test_document_processors_init.py::test_list_handler_init PASSED    [ 15%]
tests/test_document_processors_init.py::test_list_handler_list_documents_no_filter PASSED [ 17%]
tests/test_document_processors_init.py::test_list_handler_list_documents_with_filter PASSED [ 18%]
tests/test_document_processors_init.py::test_get_processor_for_file_type_csv PASSED [ 19%]
tests/test_document_processors_init.py::test_get_processor_for_file_type_vision PASSED [ 20%]
tests/test_embedding.py::test_generate_embeddings_basic PASSED           [ 21%]
tests/test_embedding.py::test_generate_embeddings_empty PASSED           [ 22%]
tests/test_embedding.py::test_generate_embeddings_batching PASSED        [ 23%]
tests/test_file_scanner.py::test_scan_files_basic PASSED                 [ 24%]
tests/test_file_scanner.py::test_scan_files_empty PASSED                 [ 25%]
tests/test_file_scanner.py::test_scan_files_invalid_path PASSED          [ 26%]
tests/test_file_scanner.py::test_scan_files_unsupported_hash PASSED      [ 27%]
tests/test_file_scanner.py::test_scan_files_exclude_pattern PASSED       [ 28%]
tests/test_integration_add_flow.py::test_add_flow_integration PASSED     [ 29%]
tests/test_integration_add_flow.py::test_add_flow_with_csv_and_image PASSED [ 30%]
tests/test_logging_setup.py::test_logging_creates_log_file PASSED        [ 31%]
tests/test_logging_setup.py::test_logging_level_respected PASSED         [ 32%]
tests/test_logging_setup.py::test_log_rotation PASSED                    [ 34%]
tests/test_logging_setup.py::test_console_and_file_output PASSED         [ 35%]
tests/test_logging_setup.py::test_debug_level_and_format PASSED          [ 36%]
tests/test_logging_setup.py::test_debug_entry_logging_for_function_calls PASSED [ 37%]
tests/test_main.py::TestParseArgs::test_add_operation PASSED             [ 38%]
tests/test_main.py::TestParseArgs::test_list_operation PASSED            [ 39%]
tests/test_main.py::TestParseArgs::test_remove_operation PASSED          [ 40%]
tests/test_main.py::TestParseArgs::test_query_operation PASSED           [ 41%]
tests/test_main.py::TestParseArgs::test_query_interactive_mode PASSED    [ 42%]
tests/test_main.py::TestParseArgs::test_debug_flag PASSED                [ 43%]
tests/test_main.py::TestParseArgs::test_custom_config PASSED             [ 44%]
tests/test_main.py::TestProcessAddFiles::test_successful_processing PASSED [ 45%]
tests/test_main.py::TestProcessAddFiles::test_skip_processed_file PASSED [ 46%]
tests/test_main.py::TestProcessAddFiles::test_processing_error PASSED    [ 47%]
tests/test_main.py::TestProcessList::test_successful_listing PASSED      [ 48%]
tests/test_main.py::TestProcessList::test_empty_listing PASSED           [ 50%]
tests/test_main.py::TestProcessList::test_listing_error PASSED           [ 51%]
tests/test_main.py::TestProcessQuery::test_single_query PASSED           [ 52%]
tests/test_main.py::TestProcessQuery::test_interactive_mode PASSED       [ 53%]
tests/test_main.py::TestProcessQuery::test_query_error PASSED            [ 54%]
tests/test_main.py::TestMain::test_successful_execution PASSED           [ 55%]
tests/test_main.py::TestMain::test_qa_system_error PASSED                [ 56%]
tests/test_main.py::TestMain::test_unexpected_error PASSED               [ 57%]
tests/test_main.py::test_query_processor_integration PASSED              [ 58%]
tests/test_main_additional.py::test_process_add_files_file_not_found PASSED [ 59%]
tests/test_main_additional.py::test_process_add_files_empty_list PASSED  [ 60%]
tests/test_main_additional.py::test_process_add_files_scanner_error PASSED [ 61%]
tests/test_main_additional.py::test_process_list_empty PASSED            [ 62%]
tests/test_main_additional.py::test_process_list_with_documents PASSED   [ 63%]
tests/test_main_additional.py::test_process_list_error PASSED            [ 64%]
tests/test_main_additional.py::test_process_remove_no_paths PASSED       [ 65%]
tests/test_main_additional.py::test_process_query_single PASSED          [ 67%]
tests/test_main_additional.py::test_process_query_error PASSED           [ 68%]
tests/test_main_additional.py::test_process_query_interactive PASSED     [ 69%]
tests/test_main_additional.py::test_process_query_interactive_keyboard_interrupt PASSED [ 70%]
tests/test_main_additional.py::test_main_success PASSED                  [ 71%]
tests/test_main_additional.py::test_main_qa_system_error PASSED          [ 72%]
tests/test_main_additional.py::test_main_unexpected_error PASSED         [ 73%]
tests/test_markdown_processor.py::test_markdown_processor_basic PASSED   [ 74%]
tests/test_markdown_processor.py::test_markdown_processor_empty_file PASSED [ 75%]
tests/test_markdown_processor.py::test_markdown_processor_metadata_override PASSED [ 76%]
tests/test_pdf_processor.py::test_pdf_processor_basic PASSED             [ 77%]
tests/test_pdf_processor.py::test_pdf_processor_metadata_override PASSED [ 78%]
tests/test_pdf_processor.py::test_pdf_processor_import_error PASSED      [ 79%]
tests/test_pdf_processor.py::test_pdf_processor_file_error PASSED        [ 80%]
tests/test_pdf_processor.py::test_pdf_processor_corrupted_file PASSED    [ 81%]
tests/test_remove_handler.py::test_find_matches PASSED                   [ 82%]
tests/test_remove_handler.py::test_remove_documents_success FAILED       [ 84%]
tests/test_remove_handler.py::test_remove_documents_not_found PASSED     [ 85%]
tests/test_remove_handler.py::test_remove_documents_batch_failure FAILED [ 86%]
tests/test_remove_handler.py::test_verify_removal PASSED                 [ 87%]
tests/test_remove_handler.py::test_cleanup_failed_removal PASSED         [ 88%]
tests/test_requirements.py::test_requirements_dynamic PASSED             [ 89%]
tests/test_text_processor.py::test_text_processor_basic PASSED           [ 90%]
tests/test_text_processor.py::test_text_processor_empty_file PASSED      [ 91%]
tests/test_text_processor.py::test_text_processor_metadata_override PASSED [ 92%]
tests/test_vector_store.py::test_initialization PASSED                   [ 93%]
tests/test_vector_store.py::test_add_and_query_embeddings PASSED         [ 94%]
tests/test_vector_store.py::test_delete_embeddings PASSED                [ 95%]
tests/test_vector_store.py::test_error_handling_on_bad_init FAILED       [ 96%]
tests/test_vector_store.py::test_error_handling_on_add PASSED            [ 97%]
tests/test_vector_store.py::test_error_handling_on_query PASSED          [ 98%]
tests/test_vector_store.py::test_error_handling_on_delete PASSED         [100%]

=================================== FAILURES ===================================
________________________ test_remove_documents_success _________________________

handler = <qa_system.remove_handler.RemoveHandler object at 0x1142d7d90>

    def test_remove_documents_success(handler):
        result = handler.remove_documents('*.pdf')
        assert 'removed' in result
>       assert set(result['removed']) == {'/docs/a.pdf', '/docs/b.pdf'}
E       AssertionError: assert set() == {'/docs/a.pdf', '/docs/b.pdf'}
E         
E         Extra items in the right set:
E         '/docs/b.pdf'
E         '/docs/a.pdf'
E         
E         Full diff:
E         + set()...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

tests/test_remove_handler.py:40: AssertionError
----------------------------- Captured stdout call -----------------------------
IN REMOVE_DOCUMENTS: pattern= *.pdf paths= None recursive= None verify_removal= None require_confirmation= None
Normalized pattern for matching: ['*.pdf']
After find_matches: found 2 matches for pattern ['*.pdf']: ['id_0', 'id_1']
IDs to be deleted: ['id_0', 'id_1']
Deleting ids: ['id_0', 'id_1']
----------------------------- Captured stderr call -----------------------------
INFO - Entered remove_documents with pattern=*.pdf, paths=None, recursive=None, verify_removal=None, require_confirmation=None
INFO - Deleting ids: ['id_0', 'id_1']
------------------------------ Captured log call -------------------------------
INFO     qa_system.remove_handler:remove_handler.py:56 Entered remove_documents with pattern=*.pdf, paths=None, recursive=None, verify_removal=None, require_confirmation=None
INFO     qa_system.remove_handler:remove_handler.py:95 Deleting ids: ['id_0', 'id_1']
_____________________ test_remove_documents_batch_failure ______________________

args = (), kwargs = {'ids': ['id_0', 'id_1'], 'require_confirmation': True}

    def fail_delete(*args, **kwargs):
>       raise Exception('delete failed')
E       Exception: delete failed

tests/test_remove_handler.py:52: Exception

During handling of the above exception, another exception occurred:

handler = <qa_system.remove_handler.RemoveHandler object at 0x114286060>

    def test_remove_documents_batch_failure(handler):
        def fail_delete(*args, **kwargs):
            raise Exception('delete failed')
        handler.vector_store.delete.side_effect = fail_delete
>       result = handler.remove_documents('*.pdf')

tests/test_remove_handler.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <qa_system.remove_handler.RemoveHandler object at 0x114286060>
pattern = ['*.pdf'], paths = None, recursive = True, verify_removal = True
require_confirmation = True

    def remove_documents(self, pattern: Union[str, List[str]] = None, paths: Union[str, List[str]] = None, recursive: bool = None, verify_removal: bool = None, require_confirmation: bool = None) -> Dict[str, Any]:
        print("IN REMOVE_DOCUMENTS: pattern=", pattern, "paths=", paths, "recursive=", recursive, "verify_removal=", verify_removal, "require_confirmation=", require_confirmation)
        logger.info(f"Entered remove_documents with pattern={pattern}, paths={paths}, recursive={recursive}, verify_removal={verify_removal}, require_confirmation={require_confirmation}")
        # Normalize input: if pattern is None and paths is provided, use paths as pattern
        if pattern is None and paths is not None:
            # Accept a single string or a list for paths
            if isinstance(paths, str):
                pattern = [paths]
            elif isinstance(paths, list):
                pattern = paths
            else:
                print("WARNING: 'paths' argument is not a string or list.")
                return {'removed': [], 'failed': [], 'not_found': [], 'errors': ["Invalid 'paths' argument type"]}
        elif pattern is not None:
            # Accept a single string or a list for pattern
            if isinstance(pattern, str):
                pattern = [pattern]
            elif not isinstance(pattern, list):
                print("WARNING: 'pattern' argument is not a string or list.")
                return {'removed': [], 'failed': [], 'not_found': [], 'errors': ["Invalid 'pattern' argument type"]}
        else:
            print("WARNING: Both 'pattern' and 'paths' are None. Nothing to remove.")
            return {'removed': [], 'failed': [], 'not_found': [], 'errors': ["No pattern or paths provided"]}
        print("Normalized pattern for matching:", pattern)
        recursive = self.recursive if recursive is None else recursive
        verify_removal = self.verify_removal_flag if verify_removal is None else verify_removal
        require_confirmation = self.require_confirmation if require_confirmation is None else require_confirmation
        result = {'removed': [], 'failed': [], 'not_found': [], 'errors': []}
        try:
            matches = self.find_matches(pattern)
            print(f"After find_matches: found {len(matches)} matches for pattern {pattern}: {[doc.get('id') for doc in matches]}")
            logger.debug(f"After find_matches: found {len(matches)} matches for pattern {pattern}: {[doc.get('id') for doc in matches]}")
            if not matches:
                result['not_found'].append(pattern)
                return result
            # Collect all matching ids
            ids = [doc.get('id') for doc in matches if doc.get('id')]
            print("IDs to be deleted:", ids)
            logger.debug(f"IDs to be deleted: {ids}")
            if ids:
                print(f"Deleting ids: {ids}")
                logger.info(f"Deleting ids: {ids}")
                self.vector_store.delete(ids=ids, require_confirmation=require_confirmation)
                if verify_removal:
                    still_exists = self.find_matches([doc.get('path') for doc in matches])
                    if still_exists:
                        result['failed'].extend([doc.get('path') for doc in still_exists])
                    else:
                        result['removed'].extend([doc.get('path') for doc in matches])
                else:
                    result['removed'].extend([doc.get('path') for doc in matches])
            else:
                print("No valid ids found for deletion.")
                logger.error("No valid ids found for deletion.")
                result['failed'].extend([doc.get('path') for doc in matches])
        except ValidationError as e:
            print("Validation error:", e)
            logger.error(f"Validation error: {e}")
            result['errors'].append({'exception': str(e), 'type': 'ValidationError'})
            raise
        except Exception as e:
            print("Unexpected error:", e)
            logger.error(f"Unexpected error: {e}")
            result['errors'].append({'exception': str(e), 'type': 'Unknown'})
>           raise RemovalError(f"Failed to remove documents: {e}")
E           qa_system.exceptions.RemovalError: Failed to remove documents: delete failed

qa_system/remove_handler.py:118: RemovalError
----------------------------- Captured stdout call -----------------------------
IN REMOVE_DOCUMENTS: pattern= *.pdf paths= None recursive= None verify_removal= None require_confirmation= None
Normalized pattern for matching: ['*.pdf']
After find_matches: found 2 matches for pattern ['*.pdf']: ['id_0', 'id_1']
IDs to be deleted: ['id_0', 'id_1']
Deleting ids: ['id_0', 'id_1']
Unexpected error: delete failed
----------------------------- Captured stderr call -----------------------------
INFO - Entered remove_documents with pattern=*.pdf, paths=None, recursive=None, verify_removal=None, require_confirmation=None
INFO - Deleting ids: ['id_0', 'id_1']
ERROR - Unexpected error: delete failed
------------------------------ Captured log call -------------------------------
INFO     qa_system.remove_handler:remove_handler.py:56 Entered remove_documents with pattern=*.pdf, paths=None, recursive=None, verify_removal=None, require_confirmation=None
INFO     qa_system.remove_handler:remove_handler.py:95 Deleting ids: ['id_0', 'id_1']
ERROR    qa_system.remove_handler:remove_handler.py:116 Unexpected error: delete failed
_______________________ test_error_handling_on_bad_init ________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x105fdf2f0>
temp_vector_config = <test_vector_store.temp_vector_config.<locals>.DummyConfig object at 0x1145ca120>

    def test_error_handling_on_bad_init(monkeypatch, temp_vector_config):
        # Simulate chromadb.Client raising an error
        import qa_system.vector_store
        monkeypatch.setattr(qa_system.vector_store.chromadb, 'Client', lambda *a, **kw: (_ for _ in ()).throw(Exception("fail")))
>       with pytest.raises(ConnectionError):
E       Failed: DID NOT RAISE <class 'qa_system.exceptions.ConnectionError'>

tests/test_vector_store.py:62: Failed
----------------------------- Captured stderr call -----------------------------
INFO - Called ChromaVectorStore.__init__(config=<test_vector_store.temp_vector_config.<locals>.DummyConfig object at 0x1145ca120>)
------------------------------ Captured log call -------------------------------
INFO     qa_system.vector_store:__init__.py:11 Called ChromaVectorStore.__init__(config=<test_vector_store.temp_vector_config.<locals>.DummyConfig object at 0x1145ca120>)
=============================== warnings summary ===============================
tests/test_main.py:375
  /Users/shepner/src/qa_system/tests/test_main.py:375: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/test_vector_store.py:10
  /Users/shepner/src/qa_system/tests/test_vector_store.py:10: PytestUnknownMarkWarning: Unknown pytest.mark.forked - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytestmark = pytest.mark.forked

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_remove_handler.py::test_remove_documents_success - Assertio...
FAILED tests/test_remove_handler.py::test_remove_documents_batch_failure - qa...
FAILED tests/test_vector_store.py::test_error_handling_on_bad_init - Failed: ...
=================== 3 failed, 91 passed, 2 warnings in 3.04s ===================
